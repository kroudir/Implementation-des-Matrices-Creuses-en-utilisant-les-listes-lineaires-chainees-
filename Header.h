#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <windows.h>


#define BLEUINV() color(9,15);
#define BLEUBACK() color(15,9);
#define BLEU() color(9,0);
#define VERT() color(10,0);
#define JAUNE() color(14,0);
#define WHITE() color(15,0);
#define WHITEINV() color(0,15);
#define ROUGE() color(12,0);
#define ROUGEBACK() color(15,12);
#define ROUGEINV() color(12,15);

#ifndef HEADER_H_INCLUDED
#define HEADER_H_INCLUDED
#define MAX 100

typedef enum
{
    BLACK,          /**< black color */
    BLUE,           /**< blue color */
    GREEN,          /**< green color */
    CYAN,           /**< cyan color */
    RED,            /**< red color */
    MAGENTA,        /**< magenta color */
    BROWN,          /**< brown color */
    LIGHTGRAY,      /**< light gray color */
    DARKGRAY,       /**< dark gray color */
    LIGHTBLUE,      /**< light blue color */
    LIGHTGREEN,     /**< light green color */
    LIGHTCYAN,      /**< light cyan color */
    LIGHTRED,       /**< light red color */
    LIGHTMAGENTA,   /**< light magenta color */
    YELLOW,         /**< yellow color */
    WHITE           /**< white color */
} COLORS;


enum{ARROW_UP = 72,ARROW_DOWN = 80, ENTER = '\r', SPACE = 32, ESCAPE = 27};


void textbackground (int color);

void textcolor (int color);

int selectMenu(char choices[5][50],int nbrChoices);


/**<*--------------------------------------------------------------------------- */
/**<*                           Declaration des structure                        */
/**<*--------------------------------------------------------------------------- */
typedef struct Maillon Maillon;
typedef struct liste liste;
typedef int tab1d[MAX] ;
typedef float tab2d[MAX][MAX] ;
typedef struct TabMatrice TabMatrice;

/**<*----------------------------------------------------------------------------*/
/**<*                           Strucutres utilisées dans Le TP                  */
/**<*-------------------------------------- -------------------------------------*/
struct Maillon{
                float val;
                int col;
                Maillon *suiv;
              };
//---------------------------------------------------------------------------------
struct liste{
                Maillon *tete;
                int taille;
            };
typedef struct liste Matrice[MAX];
//---------------------------------------------------------------------------------
struct TabMatrice{
                        Matrice Mat;
                        char NomMat;
                        int nblig;
                        int nbcol;
                     };
//---------------------------------------------------------------------------------
/**<*------------------------------------------------------------------------------------*/
/**<*                     Prototype du procédures d'implémentation du TP                 */
/**<*-------------------------------------- ---------------------------------------------*/
void ScanMatFR(tab2d t,int *l,int *c);
//----------------------------------------------------------------------------------
void ScanMatEN(tab2d t,int *l,int *c);
//---------------------------------------------------------------------------------
void printMat(tab2d t,int l,int c);
//---------------------------------------------------------------------------------
void ScanLLC(struct liste *L  );
//---------------------------------------------------------------------------------
void printLLC(struct liste L);
//---------------------------------------------------------------------------------
void TransMat(tab2d t,int l ,int c,Matrice T);
//---------------------------------------------------------------------------------
void AffichMatFR(Matrice T,int l,int c);
//---------------------------------------------------------------------------------
void AffichMatEN(Matrice T,int l,int c);
//--------------------------------------------------------------------------------
void prodMat(Matrice a,Matrice b,Matrice d,int l,int c,int n);
//---------------------------------------------------------------------------------
void SomMat(Matrice n,Matrice m,int l,int c,Matrice t);
//---------------------------------------------------------------------------------
int val_mat(Matrice t,int l,int c);
//---------------------------------------------------------------------------------
void prodScal(Matrice t,int l,float scal,Matrice a);
//---------------------------------------------------------------------------------
void TransLLC(Matrice t,tab2d m,int l,int c);
//---------------------------------------------------------------------------------
float DetMat(Matrice t,int l,int c);
//---------------------------------------------------------------------------------
void EffColLig(Matrice t,int l,int c,Matrice o,int* n,int* m,int a,int b);
//---------------------------------------------------------------------------------
void invMat(Matrice t,int l,int c,Matrice p);
//---------------------------------------------------------------------------------
void transpoMat(Matrice t,int l,int c,Matrice o);
//---------------------------------------------------------------------------------
void coMat(Matrice t,int l,int c,Matrice p);
//---------------------------------------------------------------------------------
void TransTab(Matrice t,tab2d m,int l,int c);
//---------------------------------------------------------------------------------
void solEqua(Matrice t,Matrice p,int l,int c,Matrice o);
/**<*------------------------------------------------------------------------------------*/
/**<*                          Prototype du procédures d'Affichage                       */
/**<*--------------------------------------- --------------------------------------------*/
void delay ( char chaine [1000], int t);
//---------------------------------------------------------------------------------
void color(int t,int f);
//---------------------------------------------------------------------------------
void Acceuil();
//---------------------------------------------------------------------------------
int choixMenuFR();
//---------------------------------------------------------------------------------
void getch();
//---------------------------------------------------------------------------------
void MenuSomFR(int n);
//---------------------------------------------------------------------------------
void MenuDetFR(int n);
//---------------------------------------------------------------------------------
void MenuProdFR(int n);
//---------------------------------------------------------------------------------
void MenuProdScalFR(int n);
//---------------------------------------------------------------------------------
int choixLangue(int x,int y);
//---------------------------------------------------------------------------------
void DrapeauEN(int x ,int y );
//---------------------------------------------------------------------------------
void DrapeauFR(int x,int y);
//---------------------------------------------------------------------------------
void SIGNALER(char ch[],int x,int y,int nb);
//---------------------------------------------------------------------------------
void WHITESIGN(char ch[],int x,int y);
//---------------------------------------------------------------------------------
void BLEUSIGN(char ch[],int x,int y);
//---------------------------------------------------------------------------------
void ROUGESIGN(char ch[],int x,int y);
//---------------------------------------------------------------------------------
void retourMenuFR();
//---------------------------------------------------------------------------------
void logo ();
//---------------------------------------------------------------------------------
void quitterFR();
//---------------------------------------------------------------------------------
void MenuAffMatFR(int n);
//---------------------------------------------------------------------------------
void MenuInvFR(int n);
//---------------------------------------------------------------------------------
void MenuTransFR(int n);
//---------------------------------------------------------------------------------
int SaveRestore();
//---------------------------------------------------------------------------------
void MenuSysFR(int n);
//---------------------------------------------------------------------------------
void  ProgramFR();
//---------------------------------------------------------------------------------
int choixMenuEN();
//---------------------------------------------------------------------------------
void logoEN();
//---------------------------------------------------------------------------------
void  ProgramEN();
//---------------------------------------------------------------------------------
void MenuSysEN(int n);
//---------------------------------------------------------------------------------
int SaveRestoreEN();
//---------------------------------------------------------------------------------
void MenuTransEN(int n);
//---------------------------------------------------------------------------------
void MenuInvEN(int n);
//---------------------------------------------------------------------------------
void MenuDetEN(int n);
//---------------------------------------------------------------------------------
void MenuProdScalEN(int n);
//---------------------------------------------------------------------------------
void MenuProdEN(int n);
//---------------------------------------------------------------------------------
void MenuSomEN(int n);
//---------------------------------------------------------------------------------
void MenuAffMatEN(int n);
//---------------------------------------------------------------------------------
void quitterEN();
//---------------------------------------------------------------------------------
void retourMenuEN();
//---------------------------------------------------------------------------------
/**<*--------------------------------------------------------------------------- */
/**<*            Prototype du procédures de la Machine abstraite                 */
/**<*-------------------------------------- -------------------------------------*/
Maillon* Allouer ();
//----------------------------------------------------------------------------
void Aff_Val(Maillon*P, float v);
//----------------------------------------------------------------------------
int Colone(Maillon *P);
//----------------------------------------------------------------------------
void Aff_Adr(Maillon*P,Maillon*Q);
//----------------------------------------------------------------------------
Maillon* Suivant(Maillon*P);
//----------------------------------------------------------------------------
float Valeur(Maillon*P);
//----------------------------------------------------------------------------
void liberer(Maillon*p);
//----------------------------------------------------------------------------
void Aff_col(Maillon*P,int ind);
//----------------------------------------------------------------------------



#endif // HEADER_H_INCLUDED
